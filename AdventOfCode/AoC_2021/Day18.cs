using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AdventOfCodeCore;

namespace AoC_2021
{
    public class Day18 : IDay<string>
    {
        public long A(List<string> inputs)
        {
            List<List<Pair>> AllPairs = new List<List<Pair>>();
            Pair currentPair = null;
            List<Pair> pairs;
            foreach (var line in inputs)
            {
                var expanded = Parse(line);
                Reduce(ref expanded);
                AllPairs.Add(expanded);
            }

            var currentPairs = AllPairs.First();
            foreach (var nextPair in AllPairs.Skip(1))
            {
                currentPair = new Pair
                {
                    LeftPair = currentPairs.FirstOrDefault(p => p.Depth == 0),
                    RightPair = nextPair.FirstOrDefault(p => p.Depth == 0),
                    Depth = 0,
                };
                Nest(currentPair.LeftPair);
                Nest(currentPair.RightPair);

                currentPairs = Parse(BuildString(currentPair));
                Reduce(ref currentPairs);
                //System.Diagnostics.Debug.WriteLine(BuildString(currentPairs.First()));
            }

            return Magnitude(currentPairs.First());
        }

        private List<Pair> Parse(string line)
        {
            int index = 0;
            var pairs = new List<Pair>();
            Pair currentPair = null;

            while (index < line.Count())
            {
                if (line[index] == '[')
                {
                    var newPair = new Pair();
                    pairs.Add(newPair);
                    if (currentPair is not null)
                    {
                        newPair.Depth = currentPair.Depth + 1;
                        newPair.Parent = currentPair;
                        if (currentPair.Left.HasValue || currentPair.LeftPair != null)
                        {
                            currentPair.RightPair = newPair;
                        }
                        else
                        {
                            currentPair.LeftPair = newPair;
                        }
                    }
                    currentPair = newPair;
                }
                else if (line[index] == ']')
                {
                    currentPair = currentPair.Parent;
                }
                else if (char.IsDigit(line[index]))
                {
                    int offset = 0;
                    while (char.IsDigit(line[index + offset]))
                    {
                        offset++;
                    }
                    int num = int.Parse(line.Substring(index, offset));

                    if (currentPair.Left.HasValue || currentPair.LeftPair != null)
                    {
                        currentPair.Right = num;
                    }
                    else
                    {
                        currentPair.Left = num;
                    }
                    index += offset - 1;
                }
                index++;
            }

            //Reduce(pairs);
            return pairs.ToList();
        }

        public long Magnitude(Pair pair)
        {
            var leftValue = 3 * (pair.Left ?? Magnitude(pair.LeftPair));
            var rightValue = 2 * (pair.Right ?? Magnitude(pair.RightPair));
            return leftValue + rightValue;
        }

        private void Nest(Pair pair)
        {
            pair.Depth++;
            if (pair.LeftPair is Pair leftPair)
            {
                leftPair.Parent = pair;
                Nest(leftPair);
            }
            if (pair.RightPair is Pair rightPair)
            {
                rightPair.Parent = pair;
                Nest(rightPair);
            }
        }

        private void BuildList(Pair pair, ref List<Pair> pairs)
        {
            if (pair.LeftPair is Pair leftPair)
            {
                pairs.Add(leftPair);
                BuildList(leftPair, ref pairs);
            }
            if (pair.RightPair is Pair rightPair)
            {
                pairs.Add(rightPair);
                BuildList(rightPair, ref pairs);
            }
        }

        public string BuildString(Pair pair)
        {
            var leftString = pair.Left?.ToString() ?? BuildString(pair.LeftPair);
            var rightString = pair.Right?.ToString() ?? BuildString(pair.RightPair);
            return $"[{leftString},{rightString}]";
        }

        private void Reduce(ref List<Pair> pairs)
        {
            var reducing = true;
            while (reducing)
            {
                //System.Diagnostics.Debug.WriteLine(BuildString(pairs.First()));
                if (pairs.FirstOrDefault(p => p.Depth >= 4 && p.IsNumbers) is Pair explode)
                {
                    Explode(explode, true, explode.Left.Value);
                    Explode(explode, false, explode.Right.Value);
                    var parent = explode.Parent;

                    if (parent.LeftPair == explode)
                    {
                        parent.LeftPair = null;
                        parent.Left = 0;
                    }
                    else
                    {
                        parent.RightPair = null;
                        parent.Right = 0;
                    }
                    pairs.Remove(explode);
                }
                else if (FindSplit(pairs.First()) is Pair split)
                {
                    var index = pairs.IndexOf(split);
                    if (split.Left >= 10)
                    {
                        int leftNum = (int)Math.Floor(split.Left.Value / 2.0);
                        int rightNum = (int)Math.Ceiling(split.Left.Value / 2.0);
                        split.Left = null;

                        var left = new Pair
                        {
                            Depth = split.Depth + 1,
                            Left = leftNum,
                            Right = rightNum,
                            Parent = split,
                        };
                        split.LeftPair = left;
                        pairs.Insert(index, left);
                    }
                    else if (split.Right >= 10)
                    {
                        int leftNum = (int)Math.Floor(split.Right.Value / 2.0);
                        int rightNum = (int)Math.Ceiling(split.Right.Value / 2.0);
                        split.Right = null;
                        var right = new Pair
                        {
                            Depth = split.Depth + 1,
                            Left = leftNum,
                            Right = rightNum,
                            Parent = split,
                        };
                        split.RightPair = right;
                        pairs.Insert(index + 1, right);
                    }
                }
                else
                {
                    reducing = false;
                }

                pairs = Parse(BuildString(pairs.First()));
            }
        }

        public int? Explode(Pair explode, bool left, int num)
        {
            if (explode.Parent == null)
            {
                return null;
            }
            if (left)
            {
                if (explode.Parent.Left.HasValue)
                {
                    explode.Parent.Left += num;
                    return explode.Parent.Left;
                }
                else if (explode.Parent.LeftPair is Pair leftPair && leftPair != explode)
                {
                    var pair = RightMost(leftPair);
                    pair.Right += num;
                    return pair.Right;
                }
                else
                {
                    return Explode(explode.Parent, left, num);
                }
            }
            else
            {

                if (explode.Parent.Right.HasValue)
                {
                    explode.Parent.Right += num;
                    return explode.Parent.Right;
                }
                else if (explode.Parent.RightPair is Pair rightPair && rightPair != explode)
                {
                    var pair = LeftMost(rightPair);
                    pair.Left += num;
                    return pair.Left;
                }
                else
                {
                    return Explode(explode.Parent, left, num);
                }
            }
        }

        public Pair? FindSplit(Pair from)
        {
            if (from == null)
            {
                return null;
            }
            if (from.Left >= 10)
            {
                return from;
            }
            if (from.Right >= 10)
            {
                return FindSplit(from?.LeftPair) ?? from;
            }
            return FindSplit(from?.LeftPair) ?? FindSplit(from?.RightPair);
        }

        public Pair RightMost(Pair from)
        {
            if (from?.RightPair is Pair right)
            {
                return RightMost(right);
            }
            return from;
        }

        public Pair LeftMost(Pair from)
        {
            if (from?.LeftPair is Pair left)
            {
                return LeftMost(left);
            }
            return from;
        }

        public long B(List<string> inputs)
        {
            return default;
        }

        public List<string> SetupInputs(string[] inputs)
        {
            return inputs.ToList();
        }
    }

    public class Pair
    {
        public int? Left;
        public int? Right;
        public Pair? LeftPair;
        public Pair? RightPair;
        public Pair? Parent;
        public int Depth;

        public bool IsNumbers => Left.HasValue && Right.HasValue;

        public override string ToString()
        {
            return $"{Depth} - {Left},{Right}";
        }
    }
}

/*
[[[[6,7],[7,7]],[[7,6],[6,0]]],[[[7,7],[6,6]],[[7,8],[3,0]]]]
[[[[8,2],[8,3]],[[0,9],5]],3]

[[[[[6,7],[7,7]],[[7,6],[6,0]]],[[[7,7],[6,6]],[[7,8],[3,0]]]],[[[[8,2],[8,3]],[[0,9],5]],3]]
[[[[0,[14,7]],[[7,6],[6,0]]],[[[7,7],[6,6]],[[7,8],[3,0]]]],[[[[8,2],[8,3]],[[0,9],5]],3]]
[[[[14,0],[[14,6],[6,0]]],[[[7,7],[6,6]],[[7,8],[3,0]]]],[[[[8,2],[8,3]],[[0,9],5]],3]]
[[[[14,14],[0,[12,0]]],[[[7,7],[6,6]],[[7,8],[3,0]]]],[[[[8,2],[8,3]],[[0,9],5]],3]]
[[[[14,14],[12,0]],[[[7,7],[6,6]],[[7,8],[3,0]]]],[[[[8,2],[8,3]],[[0,9],5]],3]]
[[[[14,14],[12,7]],[[0,[13,6]],[[7,8],[3,0]]]],[[[[8,2],[8,3]],[[0,9],5]],3]]
[[[[14,14],[12,7]],[[13,0],[[13,8],[3,0]]]],[[[[8,2],[8,3]],[[0,9],5]],3]]
[[[[14,14],[12,7]],[[13,13],[0,[11,0]]]],[[[[8,2],[8,3]],[[0,9],5]],3]]
[[[[14,14],[12,7]],[[13,13],[11,0]]],[[[[8,2],[8,3]],[[0,9],5]],3]]
[[[[14,14],[12,7]],[[13,13],[11,8]]],[[[0,[10,3]],[[0,9],5]],3]]
[[[[14,14],[12,7]],[[13,13],[11,8]]],[[[10,0],[[3,9],5]],3]]
[[[[14,14],[12,7]],[[13,13],[11,8]]],[[[10,3],[0,14]],3]]
[[[[[7,7],14],[12,7]],[[13,13],[11,8]]],[[[10,3],[0,14]],3]]
[[[[0,21],[12,7]],[[13,13],[11,8]]],[[[10,3],[0,14]],3]]
[[[[0,[10,11]],[12,7]],[[13,13],[11,8]]],[[[10,3],[0,14]],3]]
[[[[10,0],[23,7]],[[13,13],[11,8]]],[[[10,3],[0,14]],3]]
[[[[[5,5],0],[23,7]],[[13,13],[11,8]]],[[[10,3],[0,14]],3]]
[[[[0,5],[23,7]],[[13,13],[11,8]]],[[[10,3],[0,14]],3]]
[[[[0,5],[[11,12],7]],[[13,13],[11,8]]],[[[10,3],[0,14]],3]]
[[[[0,16],[0,19]],[[13,13],[11,8]]],[[[10,3],[0,14]],3]]
[[[[0,[8,8]],[0,19]],[[13,13],[11,8]]],[[[10,3],[0,14]],3]]
[[[[8,0],[8,19]],[[13,13],[11,8]]],[[[10,3],[0,14]],3]]
[[[[8,0],[8,[9,10]]],[[13,13],[11,8]]],[[[10,3],[0,14]],3]]
[[[[8,0],[17,0]],[[23,13],[11,8]]],[[[10,3],[0,14]],3]]
[[[[8,0],[[8,9],0]],[[23,13],[11,8]]],[[[10,3],[0,14]],3]]
[[[[8,8],[0,9]],[[23,13],[11,8]]],[[[10,3],[0,14]],3]]
[[[[8,8],[0,9]],[[[11,12],13],[11,8]]],[[[10,3],[0,14]],3]]
[[[[8,8],[0,20]],[[0,25],[11,8]]],[[[10,3],[0,14]],3]]
[[[[8,8],[0,[10,10]]],[[0,25],[11,8]]],[[[10,3],[0,14]],3]]
[[[[8,8],[10,0]],[[10,25],[11,8]]],[[[10,3],[0,14]],3]]
[[[[8,8],[[5,5],0]],[[10,25],[11,8]]],[[[10,3],[0,14]],3]]
[[[[8,13],[0,5]],[[10,25],[11,8]]],[[[10,3],[0,14]],3]]
[[[[8,[6,7]],[0,5]],[[10,25],[11,8]]],[[[10,3],[0,14]],3]]
[[[[14,0],[7,5]],[[10,25],[11,8]]],[[[10,3],[0,14]],3]]
[[[[[7,7],0],[7,5]],[[10,25],[11,8]]],[[[10,3],[0,14]],3]]
[[[[0,7],[7,5]],[[10,25],[11,8]]],[[[10,3],[0,14]],3]]
[[[[0,7],[7,5]],[[[5,5],25],[11,8]]],[[[10,3],[0,14]],3]]
[[[[0,7],[7,10]],[[0,30],[11,8]]],[[[10,3],[0,14]],3]]
[[[[0,7],[7,[5,5]]],[[0,30],[11,8]]],[[[10,3],[0,14]],3]]
[[[[0,7],[12,0]],[[5,30],[11,8]]],[[[10,3],[0,14]],3]]
[[[[0,7],[[6,6],0]],[[5,30],[11,8]]],[[[10,3],[0,14]],3]]
[[[[0,13],[0,6]],[[5,30],[11,8]]],[[[10,3],[0,14]],3]]
[[[[0,[6,7]],[0,6]],[[5,30],[11,8]]],[[[10,3],[0,14]],3]]
[[[[6,0],[7,6]],[[5,30],[11,8]]],[[[10,3],[0,14]],3]]
[[[[6,0],[7,6]],[[5,[15,15]],[11,8]]],[[[10,3],[0,14]],3]]
[[[[6,0],[7,6]],[[20,0],[26,8]]],[[[10,3],[0,14]],3]]
[[[[6,0],[7,6]],[[[10,10],0],[26,8]]],[[[10,3],[0,14]],3]]
[[[[6,0],[7,16]],[[0,10],[26,8]]],[[[10,3],[0,14]],3]]
[[[[6,0],[7,[8,8]]],[[0,10],[26,8]]],[[[10,3],[0,14]],3]]
[[[[6,0],[15,0]],[[8,10],[26,8]]],[[[10,3],[0,14]],3]]
[[[[6,0],[[7,8],0]],[[8,10],[26,8]]],[[[10,3],[0,14]],3]]
[[[[6,7],[0,8]],[[8,10],[26,8]]],[[[10,3],[0,14]],3]]
[[[[6,7],[0,8]],[[8,[5,5]],[26,8]]],[[[10,3],[0,14]],3]]
[[[[6,7],[0,8]],[[13,0],[31,8]]],[[[10,3],[0,14]],3]]
[[[[6,7],[0,8]],[[[6,7],0],[31,8]]],[[[10,3],[0,14]],3]]
[[[[6,7],[0,14]],[[0,7],[31,8]]],[[[10,3],[0,14]],3]]
[[[[6,7],[0,[7,7]]],[[0,7],[31,8]]],[[[10,3],[0,14]],3]]
[[[[6,7],[7,0]],[[7,7],[31,8]]],[[[10,3],[0,14]],3]]
[[[[6,7],[7,0]],[[7,7],[[15,16],8]]],[[[10,3],[0,14]],3]]
[[[[6,7],[7,0]],[[7,22],[0,24]]],[[[10,3],[0,14]],3]]
[[[[6,7],[7,0]],[[7,[11,11]],[0,24]]],[[[10,3],[0,14]],3]]
[[[[6,7],[7,0]],[[18,0],[11,24]]],[[[10,3],[0,14]],3]]
[[[[6,7],[7,0]],[[[9,9],0],[11,24]]],[[[10,3],[0,14]],3]]
[[[[6,7],[7,9]],[[0,9],[11,24]]],[[[10,3],[0,14]],3]]
[[[[6,7],[7,9]],[[0,9],[[5,6],24]]],[[[10,3],[0,14]],3]]
[[[[6,7],[7,9]],[[0,14],[0,30]]],[[[10,3],[0,14]],3]]
[[[[6,7],[7,9]],[[0,[7,7]],[0,30]]],[[[10,3],[0,14]],3]]
[[[[6,7],[7,9]],[[7,0],[7,30]]],[[[10,3],[0,14]],3]]
[[[[6,7],[7,9]],[[7,0],[7,[15,15]]]],[[[10,3],[0,14]],3]]
[[[[6,7],[7,9]],[[7,0],[22,0]]],[[[25,3],[0,14]],3]]
[[[[6,7],[7,9]],[[7,0],[[11,11],0]]],[[[25,3],[0,14]],3]]
[[[[6,7],[7,9]],[[7,11],[0,11]]],[[[25,3],[0,14]],3]]
[[[[6,7],[7,9]],[[7,[5,6]],[0,11]]],[[[25,3],[0,14]],3]]
[[[[6,7],[7,9]],[[12,0],[6,11]]],[[[25,3],[0,14]],3]]
[[[[6,7],[7,9]],[[[6,6],0],[6,11]]],[[[25,3],[0,14]],3]]
[[[[6,7],[7,15]],[[0,6],[6,11]]],[[[25,3],[0,14]],3]]
[[[[6,7],[7,[7,8]]],[[0,6],[6,11]]],[[[25,3],[0,14]],3]]
[[[[6,7],[14,0]],[[8,6],[6,11]]],[[[25,3],[0,14]],3]]
[[[[6,7],[[7,7],0]],[[8,6],[6,11]]],[[[25,3],[0,14]],3]]
[[[[6,14],[0,7]],[[8,6],[6,11]]],[[[25,3],[0,14]],3]]
[[[[6,[7,7]],[0,7]],[[8,6],[6,11]]],[[[25,3],[0,14]],3]]
[[[[13,0],[7,7]],[[8,6],[6,11]]],[[[25,3],[0,14]],3]]
[[[[[6,7],0],[7,7]],[[8,6],[6,11]]],[[[25,3],[0,14]],3]]
[[[[0,7],[7,7]],[[8,6],[6,11]]],[[[25,3],[0,14]],3]]
[[[[0,7],[7,7]],[[8,6],[6,[5,6]]]],[[[25,3],[0,14]],3]]
[[[[0,7],[7,7]],[[8,6],[11,0]]],[[[31,3],[0,14]],3]]
[[[[0,7],[7,7]],[[8,6],[[5,6],0]]],[[[31,3],[0,14]],3]]
[[[[0,7],[7,7]],[[8,11],[0,6]]],[[[31,3],[0,14]],3]]
[[[[0,7],[7,7]],[[8,[5,6]],[0,6]]],[[[31,3],[0,14]],3]]
[[[[0,7],[7,7]],[[13,0],[6,6]]],[[[31,3],[0,14]],3]]
[[[[0,7],[7,7]],[[[6,7],0],[6,6]]],[[[31,3],[0,14]],3]]
[[[[0,7],[7,13]],[[0,7],[6,6]]],[[[31,3],[0,14]],3]]
[[[[0,7],[7,[6,7]]],[[0,7],[6,6]]],[[[31,3],[0,14]],3]]
[[[[0,7],[13,0]],[[7,7],[6,6]]],[[[31,3],[0,14]],3]]
[[[[0,7],[[6,7],0]],[[7,7],[6,6]]],[[[31,3],[0,14]],3]]
[[[[0,13],[0,7]],[[7,7],[6,6]]],[[[31,3],[0,14]],3]]
[[[[0,[6,7]],[0,7]],[[7,7],[6,6]]],[[[31,3],[0,14]],3]]
[[[[6,0],[7,7]],[[7,7],[6,6]]],[[[31,3],[0,14]],3]]
[[[[6,0],[7,7]],[[7,7],[6,6]]],[[[[15,16],3],[0,14]],3]]
[[[[6,0],[7,7]],[[7,7],[6,21]]],[[[0,19],[0,14]],3]]
[[[[6,0],[7,7]],[[7,7],[6,[10,11]]]],[[[0,19],[0,14]],3]]
[[[[6,0],[7,7]],[[7,7],[16,0]]],[[[11,19],[0,14]],3]]
[[[[6,0],[7,7]],[[7,7],[[8,8],0]]],[[[11,19],[0,14]],3]]
[[[[6,0],[7,7]],[[7,15],[0,8]]],[[[11,19],[0,14]],3]]
[[[[6,0],[7,7]],[[7,[7,8]],[0,8]]],[[[11,19],[0,14]],3]]
[[[[6,0],[7,7]],[[14,0],[8,8]]],[[[11,19],[0,14]],3]]
[[[[6,0],[7,7]],[[[7,7],0],[8,8]]],[[[11,19],[0,14]],3]]
[[[[6,0],[7,14]],[[0,7],[8,8]]],[[[11,19],[0,14]],3]]
[[[[6,0],[7,[7,7]]],[[0,7],[8,8]]],[[[11,19],[0,14]],3]]
[[[[6,0],[14,0]],[[7,7],[8,8]]],[[[11,19],[0,14]],3]]
[[[[6,0],[[7,7],0]],[[7,7],[8,8]]],[[[11,19],[0,14]],3]]
[[[[6,7],[0,7]],[[7,7],[8,8]]],[[[11,19],[0,14]],3]]
[[[[6,7],[0,7]],[[7,7],[8,8]]],[[[[5,6],19],[0,14]],3]]
[[[[6,7],[0,7]],[[7,7],[8,13]]],[[[0,25],[0,14]],3]]
[[[[6,7],[0,7]],[[7,7],[8,[6,7]]]],[[[0,25],[0,14]],3]]
[[[[6,7],[0,7]],[[7,7],[14,0]]],[[[7,25],[0,14]],3]]
[[[[6,7],[0,7]],[[7,7],[[7,7],0]]],[[[7,25],[0,14]],3]]
[[[[6,7],[0,7]],[[7,14],[0,7]]],[[[7,25],[0,14]],3]]
[[[[6,7],[0,7]],[[7,[7,7]],[0,7]]],[[[7,25],[0,14]],3]]
[[[[6,7],[0,7]],[[14,0],[7,7]]],[[[7,25],[0,14]],3]]
[[[[6,7],[0,7]],[[[7,7],0],[7,7]]],[[[7,25],[0,14]],3]]
[[[[6,7],[0,14]],[[0,7],[7,7]]],[[[7,25],[0,14]],3]]
[[[[6,7],[0,[7,7]]],[[0,7],[7,7]]],[[[7,25],[0,14]],3]]
[[[[6,7],[7,0]],[[7,7],[7,7]]],[[[7,25],[0,14]],3]]
[[[[6,7],[7,0]],[[7,7],[7,7]]],[[[7,[12,13]],[0,14]],3]]
[[[[6,7],[7,0]],[[7,7],[7,7]]],[[[19,0],[13,14]],3]]
[[[[6,7],[7,0]],[[7,7],[7,7]]],[[[[9,10],0],[13,14]],3]]
[[[[6,7],[7,0]],[[7,7],[7,16]]],[[[0,10],[13,14]],3]]
[[[[6,7],[7,0]],[[7,7],[7,[8,8]]]],[[[0,10],[13,14]],3]]
[[[[6,7],[7,0]],[[7,7],[15,0]]],[[[8,10],[13,14]],3]]
[[[[6,7],[7,0]],[[7,7],[[7,8],0]]],[[[8,10],[13,14]],3]]
[[[[6,7],[7,0]],[[7,14],[0,8]]],[[[8,10],[13,14]],3]]
[[[[6,7],[7,0]],[[7,[7,7]],[0,8]]],[[[8,10],[13,14]],3]]
[[[[6,7],[7,0]],[[14,0],[7,8]]],[[[8,10],[13,14]],3]]
[[[[6,7],[7,0]],[[[7,7],0],[7,8]]],[[[8,10],[13,14]],3]]
[[[[6,7],[7,7]],[[0,7],[7,8]]],[[[8,10],[13,14]],3]]
[[[[6,7],[7,7]],[[0,7],[7,8]]],[[[8,[5,5]],[13,14]],3]]
[[[[6,7],[7,7]],[[0,7],[7,8]]],[[[13,0],[18,14]],3]]
[[[[6,7],[7,7]],[[0,7],[7,8]]],[[[[6,7],0],[18,14]],3]]
[[[[6,7],[7,7]],[[0,7],[7,14]]],[[[0,7],[18,14]],3]]
[[[[6,7],[7,7]],[[0,7],[7,[7,7]]]],[[[0,7],[18,14]],3]]
[[[[6,7],[7,7]],[[0,7],[14,0]]],[[[7,7],[18,14]],3]]
[[[[6,7],[7,7]],[[0,7],[[7,7],0]]],[[[7,7],[18,14]],3]]
[[[[6,7],[7,7]],[[0,14],[0,7]]],[[[7,7],[18,14]],3]]
[[[[6,7],[7,7]],[[0,[7,7]],[0,7]]],[[[7,7],[18,14]],3]]
[[[[6,7],[7,7]],[[7,0],[7,7]]],[[[7,7],[18,14]],3]]
[[[[6,7],[7,7]],[[7,0],[7,7]]],[[[7,7],[[9,9],14]],3]]
[[[[6,7],[7,7]],[[7,0],[7,7]]],[[[7,16],[0,23]],3]]
[[[[6,7],[7,7]],[[7,0],[7,7]]],[[[7,[8,8]],[0,23]],3]]
[[[[6,7],[7,7]],[[7,0],[7,7]]],[[[15,0],[8,23]],3]]
[[[[6,7],[7,7]],[[7,0],[7,7]]],[[[[7,8],0],[8,23]],3]]
[[[[6,7],[7,7]],[[7,0],[7,14]]],[[[0,8],[8,23]],3]]
[[[[6,7],[7,7]],[[7,0],[7,[7,7]]]],[[[0,8],[8,23]],3]]
[[[[6,7],[7,7]],[[7,0],[14,0]]],[[[7,8],[8,23]],3]]
[[[[6,7],[7,7]],[[7,0],[[7,7],0]]],[[[7,8],[8,23]],3]]
[[[[6,7],[7,7]],[[7,7],[0,7]]],[[[7,8],[8,23]],3]]
[[[[6,7],[7,7]],[[7,7],[0,7]]],[[[7,8],[8,[11,12]]],3]]
[[[[6,7],[7,7]],[[7,7],[0,7]]],[[[7,8],[19,0]],15]]----
[[[[6,7],[7,7]],[[7,7],[0,7]]],[[[7,8],[19,0]],[7,8]]]
[[[[6,7],[7,7]],[[7,7],[0,7]]],[[[7,8],[[9,10],0]],[7,8]]]
[[[[6,7],[7,7]],[[7,7],[0,7]]],[[[7,17],[0,10]],[7,8]]]
[[[[6,7],[7,7]],[[7,7],[0,7]]],[[[7,[8,9]],[0,10]],[7,8]]]
[[[[6,7],[7,7]],[[7,7],[0,7]]],[[[15,0],[9,10]],[7,8]]]
[[[[6,7],[7,7]],[[7,7],[0,7]]],[[[[7,8],0],[9,10]],[7,8]]]
[[[[6,7],[7,7]],[[7,7],[0,14]]],[[[0,8],[9,10]],[7,8]]]
[[[[6,7],[7,7]],[[7,7],[0,[7,7]]]],[[[0,8],[9,10]],[7,8]]]
[[[[6,7],[7,7]],[[7,7],[7,0]]],[[[7,8],[9,10]],[7,8]]]
[[[[6,7],[7,7]],[[7,7],[7,0]]],[[[7,8],[9,[5,5]]],[7,8]]]
[[[[6,7],[7,7]],[[7,7],[7,0]]],[[[7,8],[14,0]],[12,8]]]
[[[[6,7],[7,7]],[[7,7],[7,0]]],[[[7,8],[[7,7],0]],[12,8]]]
[[[[6,7],[7,7]],[[7,7],[7,0]]],[[[7,15],[0,7]],[12,8]]]
[[[[6,7],[7,7]],[[7,7],[7,0]]],[[[7,[7,8]],[0,7]],[12,8]]]
[[[[6,7],[7,7]],[[7,7],[7,0]]],[[[14,0],[8,7]],[12,8]]]
[[[[6,7],[7,7]],[[7,7],[7,0]]],[[[[7,7],0],[8,7]],[12,8]]]
[[[[6,7],[7,7]],[[7,7],[7,7]]],[[[0,7],[8,7]],[12,8]]]
[[[[6,7],[7,7]],[[7,7],[7,7]]],[[[0,7],[8,7]],[[6,6],8]]]


/**/